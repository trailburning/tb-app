<?php 

namespace TB\Bundle\FrontendBundle\EventListener;

use Symfony\Component\DependencyInjection\ContainerInterface;
use FOS\UserBundle\Event\UserEvent;
use Symfony\Component\Security\Core\SecurityContext;
use TB\Bundle\FrontendBundle\Exception\IncompleteOAuthUserException;

/**
 * 
 */
class RegistrationInitializeListener
{

    private $container;

    public function __construct(ContainerInterface $container)
    {
        $this->container = $container;
    }
    
    /**
     *
     */ 
    public function onRegistrationInitialize(UserEvent $event)
    {
        $request = $event->getRequest();
        $data = $request->request->get('fos_user_registration_form');
        
        // auto generate password for signup with external authentification provider
        if (isset($data['oAuthService']) && $data['oAuthService'] != '') {
            $tokenGenerator = $this->container->get('fos_user.util.token_generator');
            $autogeneratedPassword = substr($tokenGenerator->generateToken(), 0, 12);
            $data['plainPassword'] = ['first' => $autogeneratedPassword, 'second' => $autogeneratedPassword];
            $request->request->set('fos_user_registration_form', $data);
        }
        
        $session = $request->getSession();
        $user = $event->getUser();
        $exception = $session->get(SecurityContext::AUTHENTICATION_ERROR);
        
        // pre fill registration with values from external authentification provider
        if ($exception instanceof IncompleteOAuthUserException) {
            $user->setEmail($exception->getUser()->getEmail());
            $user->setFirstName($exception->getUser()->getFirstName());
            $user->setLastName($exception->getUser()->getLastName());
            $user->setGender($exception->getUser()->getGender());
            $user->setOAuthService($exception->getUser()->getOAuthService());
            $user->setOAuthId($exception->getUser()->getOAuthId());
            $user->setOAuthAccessToken($exception->getUser()->getOAuthAccessToken());
            $session->remove(SecurityContext::AUTHENTICATION_ERROR);
        }
    }
}
